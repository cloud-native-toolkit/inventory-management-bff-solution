apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "starter-kit.fullname" . }}
  annotations:
  {{- if and .Values.vcsInfo.repoUrl .Values.vcsInfo.branch }}
    app.openshift.io/vcs-ref: {{ .Values.vcsInfo.branch }}
    app.openshift.io/vcs-uri: {{ trimSuffix ".git" .Values.vcsInfo.repoUrl }}
  {{- end }}
  {{- if .Values.connectsTo }}
    app.openshift.io/connects-to: {{ printf "'[%s]'" (include "helm-toolkit.utils.joinListWithCommaAndDoubleQuotes" .Values.connectsTo)  }}
  {{- end }}
  labels:
    app.kubernetes.io/name: {{ include "starter-kit.name" . }}
    app: {{ include "starter-kit.name" . }}
    version: {{ .Values.image.tag | quote }}
    helm.sh/chart: {{ include "starter-kit.chart" . }}
    app.kubernetes.io/instance: {{ include "starter-kit.fullname" . }}
    {{- if .Values.partOf }}
    app.kubernetes.io/part-of: {{ .Values.partOf }}
    {{- end}}
    {{- if .Values.runtime }}
    app.openshift.io/runtime: {{ .Values.runtime }}
    {{- end}}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "starter-kit.name" . }}
      app: {{ include "starter-kit.name" . }}
      app.kubernetes.io/instance: {{ include "starter-kit.name" . }}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: {{ .Values.serviceMesh.sidecar | default "false" | quote }}
      labels:
        app.kubernetes.io/name: {{ include "starter-kit.name" . }}
        app: {{ include "starter-kit.name" . }}
        version: {{ .Values.image.tag | quote }}
        app.kubernetes.io/instance: {{ include "starter-kit.name" . }}
    spec:
      {{- if .Values.image.secretName }}
      imagePullSecrets:
        - name: {{ .Values.image.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.image.port }}
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: http
          readinessProbe:
            tcpSocket:
              port: http
          env:
            - name: IMAGE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | quote }}
            {{- if .Values.connectsTo }}
            - name: SERVICE_URL
              value: {{ printf "%s:80" (index .Values.connectsTo 0) | quote }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ default "jaeger-config" .Values.jaegerConfigName }}
                optional: true
            - secretRef:
                name: {{ default "jaeger-access" .Values.jaegerSecretName }}
                optional: true
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
